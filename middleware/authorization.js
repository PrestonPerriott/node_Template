'use strict'

var express  = require('express')
var router = express.Router()
var passport = require('passport')
//TODO: Build Mongoose DB 

/// Routes we want to exclude 
var routeExclusion = [
    '/api/login',
    '/api/register',
    '/api/refresh',
    '/api/version'
]

/// What we wanna do for all paths
router.all('*', async function(req, res, next) {
    var willExclude = false
    for (var x = 0; x <routeExclusion.length; x++) {
        var item = routeExclusion[x]
        /// if the route equals one of our exclusion urls
        if (item === req.originalUrl) {
            willExclude = true
            break
        }
    }

    if (willExclude === true) {
        console.log('Exclusion url hit')
        return next()
    }

    if (!req.get('Authorization')) {
        const error = new Error('Missing Header value')
        error.httpStatusCode = 401
        return next(error)
    }

    console.log('Hit non exclusion URL')
    await (new Promise((resolve, reject) => {
        passport.authenticate('jwt', function (error, user) {
            if (error) {
                console.log('Our error from inside the auth call in auth.js: ' + error)
                //reject(error)
               return next(error)
            } 
            if (!user) {
                const error = new Error('No user found!')
                error.httpStatusCode = 401
                //reject(error)
                return next(error)
            }
            else {
                ///Check against if not user
                console.log('Our user object is: ' + user)
                return next(null, user)
            } 
          })(req, res, next) 
    }))
})

module.exports = router


    // passport.authenticate('jwt', async function(err, user, info) {
    //     if (err) {
    //         console.log('Error generated by Passport')
    //         return next(err)
    //     } 
    //     if (!user) {
    //         console.log('Error created in DB retrieval')
    //         return next({'error':"couldn't retrieve user from DB"})
    //     }
    //     console.log('Should route with user')
    //     return next(user)
    // })
    
    // /// If this value isn't in the request throw an error
    // /// TODO: Make custom Error Class
    // if (!req.get('Authorization')) {
    //     throw new Error("No Auth Token")
    // }